// DEFINE AREA OF INTEREST
var aoi = aoi;

// LOAD & PREPROCESS LANDSAT 8
var landsat = l8.filterBounds(aoi)
  .filterDate('2018-01-01', '2018-12-31')
  .map(cloudMaskLandsat) // Apply cloud mask
  .median() // Create a median composite
  .multiply(0.0000275).add(-0.2) // Apply surface reflectance scaling
  .clip(aoi); // Clip to AOI

Map.centerObject(aoi, 12);
Map.addLayer(landsat, {
  bands: ['SR_B5', 'SR_B6', 'SR_B2'],
  min: 0,
  max: [0.5, 0.3, 0.2]
}, 'Landsat Composite');

// FUNCTION: CLOUD MASKING FOR LANDSAT
function cloudMaskLandsat(image){
  var qa = image.select('QA_PIXEL');
  var dilated = 1 << 1;
  var cirrus = 1 << 2;
  var cloud = 1 << 3;
  var shadow = 1 << 4;
  
  var mask = qa.bitwiseAnd(dilated).eq(0)
    .and(qa.bitwiseAnd(cirrus).eq(0))
    .and(qa.bitwiseAnd(cloud).eq(0))
    .and(qa.bitwiseAnd(shadow).eq(0));
    
  return image.updateMask(mask);
}

// SPECTRAL INDICES
  // NDVI (Normalized Difference Vegetation Index)
  var NDVI = landsat.expression(
    '(((NIR - RED) ) / ((NIR + RED)))', {
      'NIR': landsat.select('SR_B5'),
      'RED': landsat.select('SR_B4')
    }).rename('NDVI');
    
    // MNDWI (Modified NDWI for water detection)
  var MNDWI = landsat.expression(
    '(((GREEN - NIR) ) / ((GREEN + NIR)))', {
      'NIR': landsat.select('SR_B5'),
      'GREEN': landsat.select('SR_B3')
    }).rename('MNDWI');
    
    // NDBI (Normalized Difference Built-up Index)
  var NDBI = landsat.expression(
    '(((SWIR - NIR) ) / ((SWIR + NIR)))', {
      'NIR': landsat.select('SR_B5'),
      'SWIR': landsat.select('SR_B6')
    }).rename('NDBI');
    
  // EVI (Enhanced Vegetation Index)
  var EVI = landsat.expression(
    '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
      'NIR': landsat.select('SR_B5'),
      'RED': landsat.select('SR_B4'),
      'BLUE': landsat.select('SR_B2')
    }).rename('EVI');

  // SAVI (Soil Adjusted Vegetation Index)
  var SAVI = landsat.expression(
    '(((NIR - RED) * 1.5) / ((NIR + RED) + 0.5))', {
      'NIR': landsat.select('SR_B5'),
      'RED': landsat.select('SR_B4')
    }).rename('SAVI');
    
    

/*
var l8Viz = {bands: ['B4', 'B3', 'B2'], min: 0, max: 2500};

Map.addLayer(composite, l8Viz, 'median composite');
Map.centerObject(aoi,12);
*/

// PREPARE DATA FOR CLASSIFICATION 
var combined_all = ee.Image.cat(landsat, NDVI, MNDWI, NDBI, EVI, SAVI);

// // Define the list of input bands for classification
var bands = ['SR_B7', 'SR_B6', 'SR_B5', 'SR_B4', 'SR_B3', 'SR_B2', 'NDVI', 'MNDWI',  "NDBI", 'EVI', 'SAVI'];

//// Merge training sample classes
// Ensure these feature collections are already defined: water_body, roads_settlements, cropland, vegetation
var train = water_body.merge(roads_settlements).merge(cropland).merge(vegetation);
 
// Sample training data from image               
var training = combined_all.select(bands).sampleRegions({
              collection: train, 
              properties: ['id'],
              scale: 30
});

// Split training and validation data
var withRandom = training.randomColumn('random');
var split = 0.7;
var trainP = withRandom.filter(ee.Filter.lt('random', split));
var testP = withRandom.filter(ee.Filter.gte('random', split));

//       RANDOM FOREST CLASSIFICATION
// Train Random Forest classifier
var model = ee.Classifier.smileRandomForest({
  'numberOfTrees':1000,
  'minLeafPopulation': 1}).train({
  features: trainP,
  classProperty: 'id',
  inputProperties: bands,
});
print(model, "Model");

// Classify test set for validation
var test = testP.classify(model);
print (test, 'test');

// VARIABLE IMPORTANCE
var dict = model.explain();
var explainTitle = 'Explain Random Forest';
print(explainTitle, dict);
var variable_importance = ee.Feature(null, ee.Dictionary(dict).get('importance'));
var chart =
ui.Chart.feature.byProperty(variable_importance)
.setChartType('ColumnChart')
.setOptions({
title: 'RF variable importance',
legend: {position: 'none'},
hAxis: {title: 'Bands'},
vAxis: {title: 'Importance'}
});

print(chart);

// APPLY MODEL TO IMAGE
var classified = combined_all.select(bands).classify(model);

// ACCURACY ASSESSMENT
// Training accuracy
Map.addLayer(classified,
{min: 0, max: 5, palette: ['#082fff', '#ff173a', '#ffc82d', '#24ff28']},
'PL', false);

print('RF error matrix: ', model.confusionMatrix());
print('RF accuracy: ', model.confusionMatrix().accuracy());

// Validation accuracy
var confusionMatrix = test.errorMatrix('id', 'classification');
print('confusion matrix', confusionMatrix);
print ('validation overall accuracy: ', confusionMatrix.accuracy());

// EXPORT CLASSIFIED IMAGE
Export.image.toDrive({
  image: classified,
  description: 'LCover_Ngemplak',
  folder: 'CIFOR',
  region: aoi,
  scale: 30,
  crs: 'EPSG:32749',
  maxPixels: 1e13
});
